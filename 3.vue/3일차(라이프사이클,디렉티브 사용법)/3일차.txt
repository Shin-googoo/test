3일차(라이프사이클,디렉티브 사용법)

src>vue create my-lifecycle 프로젝트 생성

 main.js에서의 소스코드 변경
**********************************
1. main.js ->5.0.4 버전의 경우

import { createApp } from 'vue';
import App from './App.vue';
createApp(App).mount('#app');
            (결합할 컴포넌트명).mount('연결할 위치(id)')
=================================
기존에 Vue 생성자 함수를 사용하는 대신에, createApp() 함수를 사용합니다.
// 기존

2.Fragments

<template>
    <h1>{{ msg }}</h1>
    <h2>나는 헬로월드 2 이지렁</h2>
</template>

더 이상 root Element 로 감싸지 않아도 된다.=>여러개의 태그를 그냥 사용이 가능하다.

3. life cycle의 변경된 메서드

    beforeDestory메서드=>onBeforeUnmount

    destroyed메서드=>onUnmounted

**********************************
 HelloWorld.vue

<template></template> =>html,css
*****************
<script></script>  =>methods속성
******************
<style></style>

export default { //name,props,data+methods속성
  name: 'HelloWorld', //컴포넌트 이름 (selector:'HelloWorld)
  data:function(){
    return{
      username:'임시',
      age:20,
      address:'서울',
      tel:'02-123-0987'
    }
  }, //추가
  //methods->일반함수,화살표함수 둘다 사용이 가능
  //         화살표함수->this를 인식X
  methods:{  //methods:{ 키명(메서드명):function(~){}}
    sayEcho:()=>{//sayEcho:function(){
      //Date d=new Date();  d.toString()
      return new Date().toString() //날짜->문자열로 변환출력
    },
    info:function(){
      return this.username+"\t"+this.age+"\t"+this.tel
    },
    my:()=>{ //화살표함수를 이용
      return "my=>"+this
    }
  }
}
</script>

============================
<template>
   <!-- 1.화면에 출력하는 부분(template) (reactDOM와 연관)
        리액트에서 함수호출 =>{this.호출할함수명}  -->
  <div class="hello">
    <h1>{{ username }} {{age}} {{address}} {{tel}}</h1>
    정보:{{info()}}<br>
    현재시간:{{sayEcho()}}<br>
    arrow:{{my()}}
  </div>
</template>
=====================================
my-lifecycle 프로젝트 생성

App.vue에서 Life.vue을 불러다 사용

<template>
  <div id="app">
    <h1>LifeCycle hook</h1>
    <HelloWorld />
    <Life />
  </div>
</template>

<script>
//import 불러올 컴포넌트명(자식) from '경로포함해서 파일명~.vue'
import HelloWorld from './components/HelloWorld.vue'
//추가
import Life from './components/Life.vue'

export default {
  name: 'app', //부모컴포넌트 이름 <app />(태그로 표시)
  components: {  //부모컴포넌트 입장->중첩시킬 컴포넌트 목록을 표시
    HelloWorld,Life
  }
}
</script>

=======================================
Life.vue

<template>
<div><!-- 반드시 하나의 태그만 리턴(리액트와 동일) -->
  <div class="hello">
    <h1>수정전:{{mesg}}</h1>
  </div>
  <p>World 수정후:{{mesg}}</p>
</div>
</template>

<script>
export default {
  name:'Life',
  //데이터 저장
  data:function(){
      return {mesg:`Hello Vue!`}
  },
  //lifeCycle =>arrow함수 사용X this가 인식이 안됨
  beforeCreate:function(){
      console.log("beforeCreate(컴포넌트가 DOM추가되기전 호출)",this)
  },
  created:function(){console.log("created(data,event활성화되어 접근가능")},
  beforeMount:function(){
      console.log("beforeMount(첫번째 랜더링이 실행되기전 호출)")},
  mounted:function(){//리액트의 render()와 비슷한 역할
      console.log("mounted(컴포넌트,탬플릿,랜더링된 DOM에 접근가능")
      this.mesg="happy로 변경"
      console.log("mounted",this.mesg)
      },
  
  beforeUpdate:function(){
      console.log("beforeUpdate(데이터가 수정된후 새로고침전에 호출")},
  updated:function(){
      console.log("updated(데이터가 변경되고 새로고침일어난 후 호출")},
  beforeDestroy:function(){
      console.log("beforeDestroy(뷰객체가 제거되기전에 호출")},
  destroyed:function(){
      console.log("destroyed(뷰객체가 제거된 후에 호출)")},
}
</script>

<style>

</style>

=======================================
 **tip**

 ** console의 경고에러메세지를 출력시키지 않도록 설정하는 방법 **


package.json파일에 rules항목에 추가

"rules": {"no-console":"off"}, ==>지금은 업그레이드 문제로 문제X
*******************************

 ** 디렉티브(directive)=>지시자 **

 컴포넌트가 관리하는 template내 위젯의 속성에 관여
                         =============>화면에 출력하는 태그의 속성에 관여

 Vue.js가 제공하는 시스템지시자

 v-text , v-html
  v-bind
  v-model
  v-show ,  v-if , v-else ,  v-else-if
  v-for
  v-once
  v-cloak
=====================================
HelloWorld.vue  =>HelloWorld2.vue

<template>
   <!-- 1.화면에 출력하는 부분(template) 
      형식) v-종류 v-text(글자만(text())),
            v-html(태그포함한 글자(html))  -->
  <div class="hello">
    v-text:<span v-text="x"></span><br>
    v-html:<span v-html="y"></span><br>
     <h1>로컬 스타일 적용</h1>
     <Style />
    <hr />
    <!--v-bind (객체의 속성과 단방향 바인딩하기위한 방법)
      :value="mesg(속성의 키명)" 앵귤러( [value]="mesg")-->
    mesg:<input type="text" value="mesg"><br>
    :mesg:<input type="text" :value="mesg"><br>
    v-bind:mesg:<input type="text" v-bind:value="mesg"><br>
    <hr />
    <h1>양방향(v-model="연결시킬 키명")(([ngModel])와 비슷</h1>
    mesg:<input type="text" v-model="mesg"><br>
    mesg:<input type="text" v-model="mesg"><br>
    <hr />
    <h1>v-model 수식어</h1>
    <!-- Lazy -->
    <h4>Lazy(v-model.lazy="연결시킬 키명(문자열과 연관)"</h4>
    <input type="text" v-model.lazy="lazy"/>
    <p>
      <strong>Lazy:</strong>{{lazy}}
    </p>
    <!-- Number -->
    <h4>숫자는 적용되나 문자는 적용이 안된다.</h4>
    <input type="text" v-model.number="number"/>
    <p>
      <strong>Number:</strong>{{number}}
    </p>
    <p><!-- typeof 변수,값=>자료형을 알려준다.  -->
      <strong>Type of Number:</strong>{{typeof number}}
    </p>
    <!-- No Trim(공백제거없음) -->
    <h4>No Trim(공백제거 없음)</h4>
     <input type="text" v-model="noTrim"/>
    <p>
      <strong>No Trim:</strong>{{noTrim}}
    </p>
    <!-- Trim(공백제거)글자입력시 첫번째에 해당하는 공백만 인식 -->
    <h4>v-model.trim형태로 Trim(공백제거 있음)</h4>
    <input type="text" v-model.trim="trim"/>
    <p>
      <strong>Trim:</strong>{{trim}}
    </p>
    <h1>선택(양방향)</h1>
    <select v-model="mesg2">
      <option>10</option>
      <option>20</option>
      <option>30</option>
      <option>40</option>
    </select>
    <br>
    <input type="text" v-model="mesg2"><br>
  </div>
</template>

<script>
//
/* template와 연관이 되어있는 컴포넌트 정보영역
   자바스크립트코드를 사용하는 영역(함수,속성값 저장)  */
import Style from './Style.vue'

export default {
  name: 'HelloWorld', //컴포넌트 이름 (selector:'HelloWorld)
  //추가
  components:{
    Style
  },
  data:function(){
    return{
      x:'홍길동',  //jquery(text() 글자만 출력)
      y:'<h1>홍길동</h1>',//jquery(html()->태그포함한 글자출력)
      mesg:'테스트김',
      //v-model을 이용한 동적입력->유효성검사와 연관
      lazy:'',
      number:'',
      noTrim:'',
      trim:'',
      mesg2:20
    }
  }
}
</script>

<!-- template영역에 출력할 스타일시트를 적용시키는 영역
  <style>전역스타일</style> 직접적인 태그형태X 내부적인 코딩인식
                           포함시킨 자식컴포넌트도 적용
  <style scoped>로컬 스타일</style> 현재 컴포넌트에 태그형태로 지정
 -->
<style>
h1 {
  background-Color:yellow;
  color:red;
  font-size:18pt;
}

</style>
==================================
Style.vue(자식컴포넌트로 등록하는 경우)

<template>
  <div id="hello">
     <h1>자식컴포넌트 적용유무</h1>
  </div>
</template>

<script>
export default {
   name:'Style'
}
</script>

<style>
</style>
================================
vue create 7.my-directive2
 제어문,유효성 검사
 v-if,v-else,v-for
=======================









2일차(Vue의 props,default,data속성 및 사용법) =>중간점검예제

src>vue create my-bind-props 
                       생성시킬 프로젝트명

부모->자식컴포넌트로 매개변수를 전달할때 한개이상의 파라미터값 전달
     ->단방향->v-bind
         양방향->v-model  앵글러 ([ngModel])와 비슷

1.App.vue

 변경전
<!-- 자식태그(중첩) 문자열,숫자,불린,배열,객체{} -->
    <HelloWorld username="홍길동" age="20" my-address="서울"
                isMarried isMarried2="false"
                phones="[100,200,300]" 
                writer="{
                  name:'테스트',
                  company:'KIC IT'
                }"/>

===================================
 변경후
<!-- 자식태그(중첩) 문자열,숫자,불린,배열,객체{} 
      ** binding(단방향)
      숫자계산(X),객체의 키명 출력(X)
      숫자,배열,불린,객체의 값을 전달->매개변수명 앞에 v-bind:매개변수명
    -->
    <HelloWorld username="홍길동" v-bind:age="20" my-address="서울"
                isMarried v-bind:isMarried2="false"
                v-bind:phones="[100,200,300]" 
                v-bind:writer="{
                  name:'테스트',
                  company:'KIC IT'
                }"/>
  </div>

2.HelloWorld.vue에 전달받은 매개변수 받는 구문 설정

<template>
   <!-- 1.화면에 출력하는 부분(template) (reactDOM와 연관)
        객체를 전달받은 경우(객체명.키명(속성명))->출력X
        age+1(계산X)  -->
  <div class="hello">
    <h1 class="test">
      {{username}} {{age+1}} {{myAddress}} {{isMarried}} 
      {{isMarried2}} {{phones}} {{writer}} 
      {{writer.name}} {{writer.company}}
    </h1>
  </div>
</template>

<script>
//
/* template와 연관이 되어있는 컴포넌트 정보영역
   자바스크립트코드를 사용하는 영역(함수,속성값 저장)  */
export default {
  name: 'HelloWorld', //컴포넌트 이름 (selector:'HelloWorld)
  props: {   //부모컴포넌트로부터 매개변수를 전달받았을때 처리부분
    username:String, //문자열
    age:Number,//숫자//number로 소문자로 쓰면 에러발생(자료형 대문자)
    myAddress:String, //특수기호(-부분)
    isMarried:Boolean,//논리적인값(=자바의 Wrapper클래스와 형태 비슷)
    isMarried2:Boolean,
    phones:Array,//배열
    writer:Object //객체
  }
}
=====================================
 HelloWorld.vue

<template>
   <!-- 1.화면에 출력하는 부분(template) (reactDOM와 연관)
        객체를 전달받은 경우(객체명.키명(속성명))->출력X
        age+1(계산X)  -->
  <div class="hello">
    <h1 class="test">
      {{username}} {{age+1}} {{myAddress}} {{isMarried}} 
      {{isMarried2}} {{phones}} {{writer}} 
      {{writer.name}} {{writer.company}}
    </h1>
    <hr />
 **********************************************
    <h5 class="test2">
      <!-- v-bind:매개변수=전달할값(원칙) 또는 v-bind를 생략가능-->
      <Default username="홍길동" :age='20' my-address="서울"/>
      <Default username="임시" />
    </h5>
 ***********************************************
  </div>
</template>

<script>
//
/* template와 연관이 되어있는 컴포넌트 정보영역
   자바스크립트코드를 사용하는 영역(함수,속성값 저장)  
   리액트 컴포넌트를 불러오고 중첩시키지 않아도 에러발생(경고)
   Vue컴포넌트는 불러오면 반드시 컴포넌트를 등록(중첩)
*/
import Default from './Default.vue' 

export default {
  name: 'HelloWorld', //컴포넌트 이름 (selector:'HelloWorld)
  props: {   //부모컴포넌트로부터 매개변수를 전달받았을때 처리부분
    username:String, //문자열
    age:Number,//숫자//number로 소문자로 쓰면 에러발생(자료형 대문자)
    myAddress:String, //특수기호(-부분)
    isMarried:Boolean,//논리적인값(=자바의 Wrapper클래스와 형태 비슷)
    isMarried2:Boolean,
    phones:Array,//배열
    writer:Object //객체
  },
 //-------------------------------------
  components:{//부착시킬 컴포넌트 등록
     Default
  }
 //-------------------------------------
}

 Default.vue =>중첩시킬 컴포넌트로 작성

<template>
  <div>
    <h3>값이 전달되지 않으면 default값이 적용됨</h3>
    <hr />
    <h5>{{username}} {{age+1}} {{myAddress}}</h5>
    <h5>{{username}} {{age+1}} {{myAddress}}</h5>
  </div>
</template>

<script>
export default {
   name:'Default',//컴포넌트명 </Default />
   props:{
       username:String,
       /* 
        형식) 매개변수명:{type:자료형,default:디폴트값 설정}
       */
**************************************
       age:{
           type:Number,
           default:100
       },
       myAddress:{
           type:String,
           default:'제주'
       }
**************************************
   }
}
</script>

<style>

</style>
********************************************
리액트에서 데이터를 저장->state속성을 사용=>생성자에서 초기화
     constructor(props){
        state:{
         키명:값 =>{this.state.키명{=>this.setState({}) 추가,변경
       }
     }
**********************************************
Vue=>1.data속성을 이용 (date X)
          2.함수로 리턴을 받아서 출력해야 한다.
**********************************************
HelloWorld.vue에서 추가된 부분

//data속성을 이용해서 데이터저장->반드시 함수로 작성할것
  //return을 이용해서 반환받을 변수를 화면에 출력
  /*
  data:function(){
    return{
      //출력할변수명(속성):저장할값->출력목적
      x:'테스트김',
      y:'42',
      z:'서울시'
    }
  }*/
  data:()=>{return{
      x:'임시테스트',
      y:'32',
      z:'부산시'
    }
  }

==========================
HelloWorld의 출력부분 추가

<h5 class="test2">
      <!-- v-bind:매개변수=전달할값(원칙) 또는 v-bind를 생략가능-->
      <Default username="홍길동" :age='20' my-address="서울"/>
      <Default username="임시" />
      <hr />
*******************************
      이름:{{x}} 나이:{{y}}  지역:{{z}}
********************************
    </h5>

************************************************
=>Vue에서 데이터를 저장하는데 지금 data속성을 이용해서만 저장하느냐?
=>DTO클래스 따로 저장할 클래스를 만들어서 불러올 수가 있다.
************************************************
Person.js

/*
data속성의 값들로 배열,객체,클래스(~.js)가능
*/
export class Person{ //export default class Person
    username; //vue에서는 앵귤러처럼 멤버변수(속성명) 선언가능
    age;
    constructor(u,a){
        this.username=u;
        this.age=a;
    }
    getUsername(){
        return this.username;
    }
    getAge(){
        return this.age;
    }
}
=================================
HelloWorld.vue에서 추가된 부분

<Default username="홍길동" :age='20' my-address="서울"/>
      <Default username="임시" />
      <!--동적매개변수 적용(:매개변수="값이 저장된 키명(속성명)") -->
    *******************************************
      <Default :username="x" :age="y" />
      <hr />
      이름:{{x}} 나이:{{y}}  지역:{{z}}
      ******************************************
      이메일:{{k.aa}} {{k.bb}}
      person:{{p.username}} {{p.age}}
    *******************************************
    </h5>

  import Default from './Default.vue' //vue는 생략X
//추가 
import {Person} from './Person' //~.js 생략가능

********************************************
data:()=>{return{                         //화살표 함수로도 가능하다.
      x:'임시테스트',
      y:'32',
      z:[10,20,30], /* 배열 저장*/
      k:{aa:'hong',bb:30}, /*객체저장(json표기법 형식) */
      p:new Person("aaa",20)
    }
  }
**********************************************
4.my-exam 프로젝트=>3.vue>vue create my-exam

App.vue의 소스코드 작성

<template>
  <div id="app">
     <!-- 배열의 값을 전달 v-bind:매개변수=배열의값(키명) -->
    <BookList v-bind:bookList="list" />
  </div>
</template>

<script>

import BookList from './components/BookList.vue'

export default {
  name: 'app', //부모컴포넌트 이름 <app />(태그로 표시)
  components: {  //부모컴포넌트 입장->중첩시킬 컴포넌트 목록을 표시
    BookList
  },
  data:function(){
    return{
      list:[
{id:'p01',name:'위험한 식탁',price:2000,date:'20191204',img:'a'},
{id:'p02',name:'공부의 비결',price:3000,date:'20191204',img:'b'},
{id:'p03',name:'오메르타',   price:2500,date:'20191204',img:'c'},
{id:'p04',name:'행복한 여행',price:4000,date:'20191204',img:'d'},
{id:'p05',name:'해커스 토익',price:2000,date:'20191204',img:'e'},
{id:'p06',name:'도로 안내서',price:2000,date:'20191204',img:'f'}
      ]
    }//return
  }//data속성
}
</script>

<style>
#app {
  font-family: 'Avenir', Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
</style>
======================================
BookList.vue의 소스코드

<template>
  <div class="hello">
    <h1>도서 목록 {{bookList.length}}권</h1>
    <ul><!--v-bind:key="구분자역할(항목)" -->
*****************************************************
    <li v-for="book in bookList" v-bind:key="book.name">
       <img :src="require(`@/assets/image/${book.img}.jpg`)"> 
       {{book.name}} {{book.img}}
    </li>
*****************************************************
      <!-- 앵귤러의  *ngFor="let 객체명 of 배열객체명"
             뷰에서는  v-for="객체명 in 배열객체명"
      <li>
     <img src="../assets/image/a.jpg" width="100" height="100" />
     위험한 식탁
      </li>
      <li>
     <img src="../assets/image/b.jpg" width="100" height="100" />
     공부의 비결
      </li>
      <li>
     <img src="../assets/image/c.jpg" width="100" height="100" />
     오메르타
      </li>
      <li>
     <img src="../assets/image/d.jpg" width="100" height="100" />
     행복한 여행
      </li>
      <li>
     <img src="../assets/image/e.jpg" width="100" height="100" />
     해커스 토익
      </li>
      <li>
     <img src="../assets/image/f.jpg" width="100" height="100" />
     도로 안내서
      </li>  -->
    </ul>
  </div>
</template>

<script>
export default {
 name:'BookList',
 props:{
     bookList:Array // 배열을 받음
 }
}
</script>
<style>
</style>
=========================================



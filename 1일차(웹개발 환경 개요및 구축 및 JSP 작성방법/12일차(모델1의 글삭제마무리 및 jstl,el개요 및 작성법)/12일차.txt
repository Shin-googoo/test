글삭제하기 ->BoardDAO에  작성

//글삭제=>암호를 비교->delete from board where num=3
	public int deleteArticle(int num,String passwd) {
		
		String dbpasswd=null;//db에서 찾은 암호를 저장
		int x=-1;//게시물의 삭제성공유무
		
		try {
			con=pool.getConnection();
			sql="select passwd from board where num=?"; //최대값+1=실제 저장할 게시물번호
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1,num );
			rs=pstmt.executeQuery();
			if(rs.next()) {//보여주는 결과가 있다면 ->rs.last()->rs.getRow();(X)
				dbpasswd=rs.getString("passwd");
				System.out.println("dbpasswd=>"+dbpasswd);//확인한뒤에 나중에 삭제
			   
			   if(dbpasswd.contentEquals(passwd)) {	//DB상의 암호=웹상의 암호		
					sql="delete from board where num=?";
					pstmt=con.prepareStatement(sql);
					pstmt.setInt(1, num);
					int delete=pstmt.executeUpdate();
					System.out.println("게시판의 글삭제 성공유무(delete)=>"+delete);//1 or 0실패
					x=1;//삭제성공 표시
			   }else {//암호가 틀린경우
				   x=0;//삭제 실패
			   }
			}//if(rs.next())
		}catch(Exception e) {
			System.out.println("deleteArticle() 메서드 에러유발"+e);
		}finally {
			pool.freeConnection(con,pstmt,rs);
		}
		return x;
	}
=================================================
 =>Statement,PreparedStatement,ResultSet
 =>인터페이스->new연산자를 사용X 메서드의 반환형,매개변수를 통해서 얻어온다.

 =>DB의 종류에 상관없이 사용하는 메서드를 일반적으로 표준화시키기 위해서 설계
=================================================

<%
      String pageNum=request.getParameter("pageNum");//BoardDTO의 멤버변수가 아니기에
      //추가
      String passwd=request.getParameter("passwd");
      int num=Integer.parseInt(request.getParameter("num"));
      System.out.println("deletePro.jsp의 num=>"
                                   +num+",passwd=>"+passwd+",pageNum=>"+pageNum);
      
      BoardDAO dbPro=new BoardDAO();
      int check=dbPro.deleteArticle(num,passwd);//암호찾고->웹상의 암호체크
      if (check==1){ //글수정이 성공했다면
    %>
   <meta http-equiv="Refresh" content="0;url=list.jsp?pageNum=<%=pageNum%>">
   <%}else { %>
    <script>
            alert("비밀번호가 맞지않습니다.\n다시 비밀번호를 확인요망!");
            history.go(-1);
    </script>
    <%} %>
=================에러메세지 출력==========
deletepro.jsp의 num=>7,passwd=>1234,pageNum=>null
=>deleteForm.jsp에서 pageNum을 제대로 전달X
<input type="hidden" name="pageNum" value="<%=pageNum%>">
=>오타가 난 부분을 찾아서 수정=> 적용

     --------------------------------------------------------------------------------------
  모델1=>개인프로젝트,중소규모 사이트를 개발

  모델2 이상을 요구(대용량)(대기업, 정부프로젝트)=>Spring
                프로젝트--->스프링
모델1--->모델2--->스프링
  (초)        (중급)        (고급)

 chapter 14장=>el,jstl문법=>액션태그 2=> el,jstl문법=> 액션태그2
                      =============
 
 JstlTest 프로젝트=>jakarta.apache.org

웹프로그래밍의 기본=>모델1(개인,중소규모),모델2(대규모 포탈사이트,대기업)
->국책사업 스프링(국가 제공 표준 프레임워크)
=>액션태그2
el,jstl 문법=>기본적으로 제공된 액션태그(include,forward,useBean,
                                                           setProperty,getProperty) 5개
                    액션태그 2                                    내장

**************************************************
el(Expression Language)->변수의 값을 출력,객체의 멤버변수의 값출력
    표현언어->출력문(변수의 값,수식계산,객체의 속성값 출력)
**************************************************

형식) ${표현식}  =>out.println(변수명); out.println(str);
                             <%=str %> =>${변수명}

   ex) <%=article.getNum()%>=>${article.num} ->${객체명.멤버변수명}
                                                 ${article['num']}
                                                 ${article["num"]}
-------------------------------------------------------------------------------

           out.println(4+5); <%=4+5%>  ${4+5} ,${20} =>값을 저장시킬때도
                                                                                      이 형식을 사용한다.
   JstlTest
      |
       -WebContent(/)->setTag.jsp
               |
                -

  page----------->pageScope
  request
  session
  application

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>set태그,remove태그 사용법</title>
</head>
<body>
<%
   //int num1=20;
    // double num2=10.5;
    //java.util.Date  today=new java.util.Date();
%>
<%-- 
<c:set(액션태그명) var="변수명" value="저장할값" /> 자료형은 저장되는 값에 따라서 자동 결정
 --%>
<c:set var="num1" value="20" />
<c:set var="num2">
  10.5
</c:set>
<jsp:useBean id="today"  class="java.util.Date" /> 
<%-- <c:set var="today"  value="<%=new java.util.Date() %>" /> --%>
<hr>
변수 num1=${num1}<br>
변수 num2=${num2}<br>
num1+num2=${num1+num2}<br>
오늘은 ${today} 입니다.<p>
</body>
</html>
  p930 http://jakarta.apache.org
--------------------------------------------------------------------
 jstl(Jsp Standard Tag Library)=>액션태그를 사용할 수있도록 해주는 
                                                                   라이브러리 형태로 제공된 자바 패키지

  jstl.jar, standard.jar->웹상에서 다운로드 받음(압축풀기)
 
**
C:\Tomcat 9.0\lib ->복사 ->모든 프로젝트에서 불러다 사용(전역)

 특정 프로젝트에서만 사용-> WEB-INF
                                                               |
                                                               -lib에 복사(개별)

***core=>변수선언,객체의 값을 불러오기,제어문,,, 
 fmt->날짜,시간,통화 부분(가격)
=============================
 sql
 xml

 setTag.jsp

*********************************************************
<%@taglib prefix="식별자(액션태그의 종류)"  uri="액션태그의 선언문(core)" %>
                                                                                                                     별칭

*********************************************
<%=request.getParameter("name") %><p>
 이름은(el) ${param.name}
                   ====
                   el언어에의 내장객체=>매개변수를 받을때 관여하는 내장객체(request대용)

                                                             jsp내장객체

**********************************************
<%=request.getParameter("addr") %><p>
${param.addr}  

param의 el의 내장객체 =>형식) ${param.매개변수명}
**********************************************

jstl태그중에서는 기존의 다른 태그에서 만들어진 객체를 다른 액션태그에서
불러올때 (참조할때)  target="${객체명}"  =>객체로 인식

 ->setTag2.jsp 예제
==========================================
 ifTag.jsp
----------------------------------------------------
 jstlcore.jsp 정리

<h3>출력문</h3>
   <h1>
   -----------------jsp에서 출력할 구문 4가지 ----------------
   <%--
       <c:out value="출력할대상자(el과 같이 사용)" />
    --%>
   ${1+2} <c:out value="${1+2}" /><p>
   <%
       out.println(1+2);
   %>
   <%=1+2 %>
  --------------------------------------------------------------
   <hr>
   ${1 > 3 } <c:out value="${1 > 3}" />
   ${1 gt 3 } <c:out value="${1 gt 3}" />
   <hr>
   형식:session.setAttribute("key",value);<p>
   <%
       String name="hello";
       //session.setAttribute("name","하늘");
       //String name="하늘" ->session.setAttribute("name","하늘")
       // request.setAttribute("name","하늘"); =>scope="request"
 *************************************************************
   //scope="page | request | sesssion | application"	(저장영역지정시)
   // pageScope requestScope sesssionScope applicationScope ->p922 (출력할때 영역설정)
 ***************************************************************  
 %>
   <c:set var="name" value="하늘"  scope="session"/>
   expression name:<%=session.getAttribute("name") %><p>
   
   set page scope var "name":
   <c:set var="name"  value="hello" />
   <!-- 같은 변수의 값을 출력 저장영역을 표시.출력할 변수명 -->
   c:out name:<c:out value="${name}" /><br>
   c:out name:<c:out value="${pageScope.name}" /><br>
   session의 값 name:<c:out value="${sessionScope.name}" /><br>
   <hr>
   remove session scope var "name":<c:remove var="name" scope="session"/><p>
   session의 값 name2:<c:out value="${sessionScope.name}" /><br>
   </h1>
-------------------------------------------------------------------------------------
제어문 ->if,for,if~else if(=switch ~case)
=========================

 ----------------------------------------------------------------------------------------
 <%=article.getSubject() %>
  ${article.subject}

**********************************************
이름은 <%=request.getParameter("name") %>입니다.<p>
이름은(el) ${param.name} 입니다.
**********************************************

   request.getParameter("매개변수명")

   ${param.매개변수명}  =>param->el의 내장객체로써 요청했을때 파라미터값을
                                                  전달하는 내장객체
--------------------------------------------------------------
  request.getParameter("age")=>${param.age}
  request.getParameter("address")=>${param.address}
--------------------------------------------------------------
** setTag2.jsp **

<%@ taglib  prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib  prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<!DOCTYPE html>

<%
      //request.setCharacterEncoding("utf-8");
   // java.util.HashMap map=new java.util.HashMap();
    //map.put("name","홍길동");//map.get(키명(name))
%>
<fmt:requestEncoding  value="utf-8" />

<c:set var="map" value="<%=new java.util.HashMap() %>" />

<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
  <%-- 
     map.put("name","홍길동");
   형식:<c:set target="${불러올객체명}" property="속성명(멤버변수명)"  value="저장할값" />
  
   --%>
<c:set target="${map}" property="name"  value="홍길동" />  
 
 <!-- map.get(키명) --> 
 1.변수 map에 저장된 name값:${map.name}<br>
 2.변수 map에 저장된 name값:${map['name']}<br>
 3.변수 map에 저장된 name값:${map["name"]}<br> 
 

 <form method="post" action="setTag2.jsp">
   이름:<input type="text" name="name">
        <input type="submit" value="전송">
 </form> 
 <hr>
 이름은 <%=request.getParameter("name") %>입니다.<p>
이름은(el) ${param.name} 입니다.
</body>
</html>
==========================================
 **jstlcore(3).jsp**
<%--
  <c:out(액션태그명) value(속성명)="출력할 대상자(el과 같이 사용)" />
  --%>
  ${1+2} <c:out value="${1+2}" /><p>
  <%
     out.println(1+2);
  %>
  <%=1+2 %>
  <hr>
  ${1>3}  <c:out value="${1>3}" />
  ${1 gt 3}  <c:out value="${1 gt 3}" />
  <hr>
  <%
     String name="hello";
     //String name="하늘";
     //session.setAttribute("name","하늘");
  
  %>
  <c:set var="name"  value="하늘"  scope="session" />
  expression name:<%=session.getAttribute("name") %><p>
  
  set page scope var "name":
  <c:set var="name"  value="hello" /><p>
  <!-- 같은 변수의 값을 출력(어떻게 구분해서 출력? 저장영역.출력할 변수명) -->
 1. c:out name:<c:out value="${name}" /><br>
 2. c:out name:<c:out value="${pagescope.name}" /><br>
 3. session의 값 name:<c:out value="${sessionScope.name}" /><br>
 <hr>
 remove session scope var "name":<c:remove var="name" scope="session" /><p>
 session의 값 name:<c:out value="${sessionScope.name}" /><br>

ifTag(4).jsp =>save as chooseTag(5).jsp

<c:set var="age" value="${20}" />
<c:set var="name" value="${'bk'}" />
<c:if test="true">
   무조건 실행이 되는 구문
</c:if>
<c:if test="${19 < age}">
  당신의 나이는 19살 이상이군요!
</c:if>
<c:if test="${name=='bk'}">
 name의 값은 ${name} 입니다.<br>
</c:if>

http://localhost:8090/JstlTest/chooseTag(5).jsp?name2=bk
                                                                   --------------
                                                                    ?age2=20


<!-- 다중 조건식 else if,switch~case 
   c:choose
     c:when test="조건식"
          수행할 문장
     /c:when
     c:when test="조건식2"
          수행할 문장
     /c:when
      ,,,
      c:otherwise ->else
          위의 조건에 해당되지 않은 경우
      /c:otherwise
    /c:choose
 -->
 <ul>
 <c:choose>
    <c:when test="${param.name2=='bk'}">
       name2 파라미터값은 ${param.name2} 입니다.<br>
    </c:when>
    <c:when test="${param.age2 > 18}">
       당신의 나이는 18세 이상이군요!<br>
    </c:when>
    <c:otherwise>
     <li>당신은 'bk'도 아니고 나이도 18세 이상이 아니군요</li>
    </c:otherwise>
 </c:choose>
</ul>
------------------------------------------------------------------
param(6).jsp=>액션태그로도 파라미터값을 전달이 가능

<%
    //페이지 이동,파라미터값도 같이 전달
   //response.sendRedirect("http://www.naver.com");//외부 사이트로 이동
   //response.sendRedirect("chooseTag(5).jsp?name2=bk");//특정 jsp파일로 이동
   //p921~940 -><c:redirect url="이동할 페이지명" />
   //<c:redirect url="이동할 페이지명"><c:param name="매개변수명"  value="전달할값" />,,  </c:redirect>
%>
<%-- <c:redirect url="chooseTag(5).jsp" />" --%>
<c:redirect url="chooseTag(5).jsp">
   <c:param name="name2"  value="bk" />
</c:redirect>
-----------------------------------------------------------------
catch(7).jsp

<%
       //try {실행구문}catch(Exception ex){ex.getMessage() or ex.toString()}
       //형식) <c:catch var="예외처리 객체명"> 처리내용 </c:catch>
       //http://localhost:8090/JstlTest/catch(7).jsp?name=test
%>
<h1>
<c:catch var="ex">
   name의 매개변수명:<%=request.getParameter("name") %>
   <%
          if(request.getParameter("name").equals("test")) {%>
           ${param.name}은 test입니다.
 <%  }  %>
</c:catch>

<%-- <c:if test="${not empty ex }"> --%> 
                              ======>el언어에서 사용하는 예약어
<c:if test="${ex!=null}">
                    ======>자바코드
   예외가 발생하였습니다.<br>
   ${ex}
</c:if>
-------------------------------------------------
forEach(8).jsp

<%
   java.util.HashMap mapData=new java.util.HashMap();
   mapData.put("name","홍길동");//map.get(키명(name))
   mapData.put("today",new java.util.Date());//날짜객체
   //int [] intArray={1,2,3,4,5};//배열도 객체다
%>
<c:set var="intArray"  value="<%=new int[] {1,2,3,4,5} %>" />
<c:set var="map" value="<%=mapData %>" />
<html>
<head>
<meta charset="UTF-8">
<title>forEach구문</title>
</head>
<body>
<%
   //1~100까지의 합중에서 홀수값을 출력
******************************************************
   int sum=0;
   for(int i=1;i<=100;i+=2){//c:forEach var="초기변수"  begin="시작값" end="종료값"
	   //if(i%2==1)                // step="증가치" (default  step="1") 이 아닌경우 써줘야된다.
	   sum+=i;//sum=sum+i //<c:set var="sum"  value="${sum+i}" /> 
	                                           //동일한 변수 한번사용 ->기존의 변수에 값을 새로운값으로 저장(변경)
   }
   out.println(sum);
%>
*******************************************************
<h4>1~100까지의 홀수의 합</h4>
<c:set var="sum"  value="0" />
<c:forEach var="i" begin="1" end="100" step="2">
	<c:set var="sum"  value="${sum+i}" />
</c:forEach>
결과:${sum}
<hr>
<h4>배열의 값,컬렉션의 값을 출력</h4>
<%--   <c:set var="intArray"  value="<%=new int[] {1,2,3,4,5} %>" />    
          items="${외부에서 불러올 객체명}"
 --%>

<c:forEach var="i"  items="${intArray}"  begin="2"  end="4">
    [${i}]
</c:forEach>
<h4>Map(key,value)</h4>
<!-- var(객체명) items(배열 또는 컬렉션객체)  i는 hashmap객체에서 꺼낸 각각의 객체를 의미-->
 <c:forEach var="i"  items="${map}">
         ${i.key}=${i.value}<br>
 </c:forEach>

import(9).jsp

<%
  //String url="http://www.chosun.com";
  //네이버와 다음은 외부에서 접근이 못하게 설정->302 (접근금지)
  //<c:import url="접속사이트 주소" var="접속해서 가져올 데이터 저장할 변수명"
  //escapeXml="true" ->태그자체를 문자열로 인식->문자형태로 출력
  //escapeXml="false"->본문내용 그대로 (html를 실행한 결과 그대로)
%>
<c:set var="url" value="http://www.empas.com" />
<c:import url="${url}" var="u" />
<c:out value="${url}" />가져옵니다.<p>
<c:out value="${u}" escapeXml="false" />

<h4>내부자원을 가져오기</h4>
<!-- chooseTag(5).jsp?name2=bk (Get방식으로 매개변수 전달) -->
<c:set var="url" value="chooseTag(5).jsp" />
<c:import url="${url}" var="u">
	<c:param name="name2"  value="bk" />
</c:import>
<c:out value="${u}" escapeXml="false" />
</body>
</html>
-------------------------------------------------------------------
jstlfmt(10).jsp

<fmt:setLocale value="ko-KR" />
 <h1><!-- value(출력할값) ,type(숫자,통화,퍼센트 단위를 지정) -->
 number:<fmt:formatNumber value="9876543.61"  type="number"   /><br>
 currency:<fmt:formatNumber value="9876543.61"  type="currency"   /><br>
 percent:<fmt:formatNumber  type="percent" >
                     9876543.61
           </fmt:formatNumber><br>
 <!-- 사용자정의 형식포맷으로 지정하고 싶다. pattern=설정할 타입포맷 지정 -->
 pattern=".0000":<fmt:formatNumber value="9876543.61"  pattern=".0000"   /><br>
 pattern="#,#00.0#":<fmt:formatNumber value="9876543.61"  pattern="#,#00.0#"   /><br>
 
 <hr>
 <jsp:useBean id="now" class="java.util.Date" />
 <c:out value="${now}" /><p>
 <!-- 
     formatDate액션태그 value="출력할값"  type(날짜만,시간만, 둘다 출력)
  -->
  date:<fmt:formatDate value="${now}"   type="date" /><br>
  time:<fmt:formatDate value="${now}"   type="time" /><br>
  both:<fmt:formatDate value="${now}"   type="both" /><br>
 
 <!-- dateStyle(날짜만 세부적으로 설정할때),timeStyle(시간을 세부적으로 설정)  -->
 default:<fmt:formatDate value="${now}" type="both" 
                               dateStyle="default" timeStyle="default" /><br>
                               
 short:<fmt:formatDate value="${now}" type="both" 
                               dateStyle="short" timeStyle="short" /><br>
                               
 medium:<fmt:formatDate value="${now}" type="both" 
                               dateStyle="medium" timeStyle="medium" /><br>
                               
 long:<fmt:formatDate value="${now}" type="both" 
                               dateStyle="long" timeStyle="long" /><br>
                               
 full:<fmt:formatDate value="${now}" type="both" 
                               dateStyle="full" timeStyle="full" /><br>
 pattern:"yy년 MM월 dd일 HH시 mm분 ss초":  
   <fmt:formatDate value="${now }"  type="both"
                             pattern="yy년 MM월 dd일 HH시 mm분 ss초"     /><br>  

         요청에 따라서 처리되는 방식이 다를뿐
 Model 1---Model 2
                el,jstl ->모델2와는 상관이 없다.(화면에 출력->편리성)
                                                         단점->유지보수가 쉽지않다.
----------------------------------------------------------------------


 
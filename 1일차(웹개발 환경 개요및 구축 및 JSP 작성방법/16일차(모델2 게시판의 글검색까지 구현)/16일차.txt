16일차(모델2로 작성한 게시판의 조회하기)

 www.jspstudy.co.kr
===============================
** 글조회하기 구현 **

=========================================
 기존의 프로젝트+새로운 기능을 추가=>백업(원래 상태로 되돌릴 수 있도록 조치)
=========================================
 1.list.jsp(편집)=>list2.jsp(백업)->list.jsp 이름변경

              ctrl+c,ctrl+v(연속해서 입력할것)
 2.ListAction (편집)=>ListAction2->ListAction 이름변경
==================================
1.list.jsp를 검색어를 추가시켜주는 화면디자인을 작성(위,아래 쪽부분 디자인)
 
  글조회하기=>상품검색,회원검색,재고관리검색,,,

<form name="test"  action="/JspBoard2/list.do">
   <select name="search"> =>1.검색할 대상자(검색분야)
      <option value="subject">제목</option>
      <option value="subject_content">제목+본문</option>
      <option value="writer">작성자</option>
   </select>
   <input type="text" size="15" name="searchtext">&nbsp;  =>2.검색어
   <input type="submit" value="검색">
</form>

2.BoardDAO에 메서드 작성(3개)=>검색어에 관련 2개, 페이징 처리 정리 1개

1) 총레코드 갯수 구하기

//(1)게시판의 레코드수를 검색어에 따른 메서드작성(검색분야,검색어)
	
	public int getArticleSearchCount(String search,String searchtext) {  //getMemberCount()
		int x=0;//총 레코드갯수를 저장
		
		try {
			con=pool.getConnection();//커넥션풀에서 한개 빌려오는작업
			System.out.println("con=>"+con);//디버깅코드
			//------------------------------------------------------------------------
			if(search==null || search=="") { //검색분야 선택X (검색어를 입력하지 않은경우)
				sql="select count(*) from board"; //select count(*) from member;
			}else { //검색분야(제목,작성자,제목+본문)
				if(search.equals("subject_content")) { //제목+본문
					sql="select count(*) from board where subject like '%"+
				           searchtext+"%' or content like '%"+searchtext+"%' ";
				}else { //제목,작성자->매개변수를 이용해서 하나의 sql통합
					sql="select count(*) from board where "+search+" like '%"+
				           searchtext+"%' ";
				}
			}
			System.out.println("getArticleSearchCount 검색sql=>"+sql);
			//-------------------------------------------------------------------------
			pstmt=con.prepareStatement(sql);
			rs=pstmt.executeQuery();
			if(rs.next()) {//보여주는 결과가 있다면
				x=rs.getInt(1);  //변수명=rs.get자료형(필드명 또는 인덱스번호)=>필드명X을 사용할 수 없는 경우에 사용
			}
		}catch(Exception e) {
			System.out.println("getArticleSearchCount() 메서드 에러유발"+e);
		}finally {
			pool.freeConnection(con,pstmt,rs);//연결객체 및 다른 객체 반납
		}
		return x;
	}
===============================================
public List getBoardArticles(int start,int end,String search,String searchtext) {
		
		List articleList=null;//ArrayList articleList=null;
		
		try {
			con=pool.getConnection();
		    //---------------------------------------------------------------------------
			if(search==null || search=="") {
				sql="select * from board order by ref desc,re_step asc limit ?,?";//1,10
			}else { //제목+본문
				if(search.equals("subject_content")) { //제목+본문
					sql="select * from board where subject like '%"+
				           searchtext+"%' or content like '%"+searchtext+"%' order by ref desc,re_step asc limit ?,?";
				}else { //제목,작성자->매개변수를 이용해서 하나의 sql통합
					sql="select * from board where "+search+" like '%"+
				           searchtext+"%' order by ref desc,re_step asc limit ?,?";
				}
			}
			System.out.println("getBoardArticles()의 sql=>"+sql);
			//-----------------------------------------------------------------------------
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, start-1);//mysql은 레코드순번이 내부적으로 0부터 시작
			pstmt.setInt(2, end);
			rs=pstmt.executeQuery();
			//글목록보기
			if(rs.next()) {//레코드가 최소 만족 1개이상 존재한다면
				articleList=new ArrayList(end);//10=>end갯수만큼 데이터를 담을 공간을 생성하라
				do {
					BoardDTO article=new BoardDTO();//MemberDTO~
					article.setNum(rs.getInt("num"));
					article.setWriter(rs.getString("writer"));
					article.setEmail(rs.getString("email"));
					article.setSubject(rs.getString("subject"));
					article.setPasswd(rs.getString("passwd"));
					article.setReg_date(rs.getTimestamp("reg_date"));//오늘날짜->코딩 ->now()
					article.setReadcount(rs.getInt("readcount"));//default->0
					article.setRef(rs.getInt("ref"));//그룹번호->신규글과 답변글 묶어주는 역할
					article.setRe_step(rs.getInt("re_step"));//답변글이 나오는 순서(0,1,2,3,,오름차순)
					article.setRe_level(rs.getInt("re_level"));//들여쓰기(답변의 깊이)
					article.setContent(rs.getString("content"));//글내용
					article.setIp(rs.getString("ip"));//글쓴이의 ip주소
					                                              //request.getRemoteAddr()
					//추가
					articleList.add(article);
				}while(rs.next());
			}
		}catch(Exception e) {
			System.out.println("getArticles() 메서드 에러유발"+e);
		}finally {
			pool.freeConnection(con,pstmt,rs);
		}
		return articleList;
	}

=============================================
 모델2에서 액션클래스=>자바빈즈의 메서드를 호출하는 문장->단순
            ex) ListAction의 소스코드를 ->BoardDAO로 이동해서 정리해주는 메서드작성
             자바빈즈클래스(BoardDAO) =>유지보수를 편리하기위해서 소스코드를 정리

 변수명(v_변수명),상수명(c_상수명)
------------------------------------------------------------------------------
//---(3)페이징 처리계산 정리해주는 메서드(ListAction)-------------------------------------
    //1)화면에 보여주는 페이지번호  2) 화면에 출력할 레코드갯수
    //Hashtable=>페이징 처리에 관련된 처리결과를 저장한 변수들을 하나의 객체에 담아서 ->ListAction
    public Hashtable pageList(String pageNum,int count) {
    	
    	//1.페이징 처리결과를 저장할 hashtable객체를 선언
    	Hashtable<String,Integer> pgList=new Hashtable<String,Integer>();
    	//ListAction에서의 복잡한 페이징처리를 대신 처리
	     int pageSize=5;//numPerPage->페이지당 보여주는 게시물수(=레코드수) 10
	     int blockSize=3;//pagePerBlock->블럭당 보여주는 페이지수 10
	     
	    //게시판을 맨 처음 실행시키면 무조건 1페이지부터 출력
	    if(pageNum==null){
	    	pageNum="1";//default(무조건 1페이지는 선택하지 않아도 보여줘야 하기때문에),가장 최근의 글
	    }
	    int currentPage=Integer.parseInt(pageNum);//"1"->1 현재페이지(=nowPage)
	    //메서드 호출->시작 레코드번호
	    //                  (1-1)*10+1=1,(2-1)*10+1=11,(3-1)*10+1=21)
	    int startRow=(currentPage-1)*pageSize+1; //시작 레코드 번호
	    int endRow=currentPage*pageSize;//1*10=10,2*10=20,3*10=30 ->마지막 레코드번호
	    int number=0;//beginPerPage->페이지별로 시작하는 맨 처음에 나오는 게시물번호
	    System.out.println("현재 레코드수(count)=>"+count);
	    //            122-(1-1)*10=122,122-(2-1)*10=112
	    number=count-(currentPage-1)*pageSize;
	    System.out.println("페이지별 number=>"+number);
	    
	    //총페이지수,시작,종료페이지 계산
	    //                      122/10=12.2+1=>12.2+1.0=13.2=13페이지
	       int pageCount=count/pageSize+(count%pageSize==0?0:1);
	    //블럭당 페이지수 계산->10->10배수,3->3배수
	       int startPage=0;//1,2,3,,,,10 [다음 블럭 10]->11,12,,,,20
	       if(currentPage%blockSize!=0){//1~9,11~19,21~29
	    	   startPage=currentPage/blockSize*blockSize+1;
	       }else{ //10%10=0,(10,20,30)
	    		               //((10/10)-1)*10+1
	    	   startPage=((currentPage/blockSize)-1)*blockSize+1;
	       }
	       int endPage=startPage+blockSize-1;//1+10-1=10
	       System.out.println("startPage="+startPage+",endPage="+endPage);
	       if(endPage > pageCount)
	    	   endPage=pageCount;//마지막페이지=총페이지수
	       //페이징처리에 대한 계산결과->Hashtable,HashMap->ListAction전달->메모리에 저장->list.jsp
	       pgList.put("pageSize", pageSize);//<->pgList.get(키명)("pageSize")
	       pgList.put("blockSize", blockSize);
	       pgList.put("currentPage", currentPage);
	       pgList.put("startRow", startRow);
	       pgList.put("endRow", endRow);
	       pgList.put("count", count);
	       pgList.put("number", number);
	       pgList.put("startPage", startPage);
	       pgList.put("endPage", endPage);
	       pgList.put("pageCount", pageCount);
	       
	       return pgList;
    }
=============================================
3.ListAction클래스를 편집

public class ListAction implements CommandAction {

	 // /list.do로 요청이 들어왔을때 처리해주는 구문
	@Override
	public String requestPro(HttpServletRequest request, HttpServletResponse response) throws Throwable {
		// TODO Auto-generated method stub
		String pageNum=request.getParameter("pageNum");
		//추가(검색분야,검색어)
		String search=request.getParameter("search");//검색분야
		String searchtext=request.getParameter("searchtext");
		System.out.println("ListAction의 매개변수 확인");
		System.out.println("pageNum="+pageNum+",search="+search+",searchtext="+searchtext);
		
		int count=0;//총레코드수
		List articleList=null;//화면에 출력할 레코드를 저장할 변수
		
		BoardDAO dbPro=new BoardDAO();
		count=dbPro.getArticleSearchCount(search, searchtext);//sql구문에 따라라서 결과 달라짐
		System.out.println("현재 검색된 레코드수(count)=>"+count);
		
		Hashtable<String,Integer> pgList=dbPro.pageList(pageNum, count);
		
	    if(count > 0){
	    	System.out.println(pgList.get("startRow")+","+pgList.get("endRow"));
	    	articleList=dbPro.getBoardArticles(pgList.get("startRow"), 
	    			                                          pgList.get("pageSize"),
	    			                                          search,searchtext);//첫번째 레코드번호,불러올 갯수
	    }else { //count=0
	    	articleList=Collections.EMPTY_LIST;//아무것도 없는 빈 list객체 반환
	    }
	    
		//2.처리한 결과를 공유(서버메모리에 저장)->이동할 페이지에 공유해서 사용(request객체)
	    //request.getAttribue("currentPage"(키명))=>${currentPage(키명)}
	    request.setAttribute("search", search);//검색분야
	    request.setAttribute("searchtext", searchtext);//검색어
	    request.setAttribute("pgList", pgList);//페이징처리 10개 정보
	    request.setAttribute("articleList", articleList);//${articleList}
	    
		//3.공유해서 이동할 수 있도록 페이지를 지정
		return "/list.jsp"; // /board/list.jsp=>경로를 변경해서 지정할 수있다.
	}
}
===============================================
4.list.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" %>
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<!DOCTYPE html>
<%
   //int currentPage=(Integer)request.getAttribute("currentPage");//Object->Integer->int
   //int count=(Integer)request.getAttribute("count"); //${count}
   //Hashtable pgList=(Hashtable)request.getAttribute("pgList"); 
   //pgList.get("count") =>${pgList.count}
   //${currentPage}
%>
<html>
<head>
<title>게시판</title>
<link href="style.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#e0ffff">
<center><b>글목록(전체 글:${pgList.count})</b>
<table width="700">
<tr>
    <td align="right" bgcolor="#b0e0e6">
    <a href="/JspBoard2/writeForm.do">글쓰기</a>
    </td>
</tr>
</table>
<!-- 데이터의 유무  -->
<c:if test="${pgList.count==0}">
<table border="1" width="700" cellpadding="0" cellspacing="0" align="center">
   <tr>
        <td align="center">게시판에 저장된 글이 없습니다.</td>
   </tr>
</table>
</c:if>
<c:if test="${pgList.count > 0}">
<table border="1" width="700" cellpadding="0" cellspacing="0" align="center"> 
    <tr height="30"  bgcolor="#b0e0e6"> 
      <td align="center"  width="50"  >번 호</td> 
      <td align="center"  width="250" >제   목</td> 
      <td align="center"  width="100" >작성자</td>
      <td align="center"  width="150" >작성일</td> 
      <td align="center"  width="50" >조 회</td> 
      <td align="center"  width="100" >IP</td>    
    </tr>
    <!-- 실질적으로 레코드를 출력시켜주는 부분 -->
    <c:set var="number" value="${pgList.number}" />
    <c:forEach var="article" items="${articleList}">
   <tr height="30"  onmouseover="this.style.backgroundColor='white'"  
                            onmouseout="this.style.backgroundColor='#e0ffff'"><!-- 하나씩 감소하면서 출력하는 게시물번호 -->
    <td align="center"  width="50" >
          <c:out value="${number}" />
          <c:set var="number"  value="${number-1}" />
    </td>
    <td  width="250" >
	<!-- 답변글인 경우 먼저 답변이미지를 부착시키는 코드  -->
	
	 <c:if test="${article.re_level > 0}">
	  <img src="images/level.gif" width="${7*article.re_level}" height="16">
	  <img src="images/re.gif">
    </c:if><c:if test="${article.re_level==0}">
	  <img src="images/level.gif" width="${7*article.re_level}" height="16">
	    <!-- num(게시물번호),pageNum(페이지번호)  -->
	   </c:if>     
      <a href="/JspBoard2/content.do?num=${article.num}&pageNum=${pgList.currentPage}">
           ${article.subject}
           </a> 
         
         <c:if test="${article.readcount >=20}">
         <img src="images/hot.gif" border="0"  height="16">
         </c:if>
          </td>
    <td align="center"  width="100"> 
       <a href="mailto:${article.email}">${article.writer}</a></td>
    <td align="center"  width="150">
        <fmt:formatDate value="${article.reg_date}" timeStyle="medium" 
                                  pattern="yy.MM.dd (hh:mm)" />
    </td>
    <td align="center"  width="50">${article.readcount}</td>
    <td align="center" width="100" >${article.ip}</td>
  </tr>
   </c:forEach>
</table>
</c:if>

<!-- 페이징 처리  -->

<c:if test="${pgList.startPage > pgList.blockSize}">
	<a href="/JspBoard2/list.do?pageNum=${pgList.startPage-pgList.blockSize}&search=${search}&searchtext=${searchtext}">[이전]</a>
</c:if>

<c:forEach var="i" begin="${pgList.startPage}" end="${pgList.endPage}">
	<a href="/JspBoard2/list.do?pageNum=${i}&search=${search}&searchtext=${searchtext}">
	   <c:if test="${pgList.currentPage==i}">
	          <font color="red"><b>[${i}]</b></font>
	   </c:if>
	   <c:if test="${pgList.currentPage!=i}">
	          ${i}
	   </c:if>
	</a>
</c:forEach>

<c:if test="${pgList.endPage < pgList.pageCount}">
	<a href="/JspBoard2/list.do?pageNum=${pgList.startPage+pgList.blockSize}&search=${search}&searchtext=${searchtext}">[다음]</a> 
</c:if>

<p>
<!-- 검색어 추가(자주 검색이 되는 항목을 잘 선택) 제목,작성자,제목+본문
       ex) search.do ->새로운 요청명령어를 이용해서 추가
             list.do->기존의 내용을 추가
  -->
<form name="test"  action="/JspBoard2/list.do">
   <select name="search">
      <option value="subject">제목</option>
      <option value="subject_content">제목+본문</option>
      <option value="writer">작성자</option>
   </select>
   <input type="text" size="15" name="searchtext">&nbsp;
   <input type="submit" value="검색">
</form>
</center>
</body>
</html>
===============================================

1.페이징 처리->1.BoardDAO.java=>pageList 메서드 문제->복사=>문제발생
2.ListAction->requestPro 메서드 문제=>복사=>문제발생
3.list.jsp에서 출력문제

 모델1=>1.BoardDAO 메서드 2개의 메서드 작성(검색)추가
             2.list.jsp에서 ListAction의 소스코드를 list.jsp

===============================================
 








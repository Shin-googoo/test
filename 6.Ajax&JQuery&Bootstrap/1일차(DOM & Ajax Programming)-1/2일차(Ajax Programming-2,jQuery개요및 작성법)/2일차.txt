2일차(Ajax Programming-2,jQuery개요및 작성법)

5.domajax2.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Ajax의 개요 및 작성법(xhr객체)</title>
<script>
    var httpRequest=null;//xhr객체를 저장할 변수(전역변수의 성격)
  
  function getXHR(){
	  if(window.XMLHttpRequest){
		  /*
		  var xhrObject=new XMLHttpRequest();//객체를 생성=->반환
		  return xhrObject; */
		  return new XMLHttpRequest();
	  }
  }
  //2)요청을 받아서 처리해주는 함수
  function load(url){//2.요청문서를 매개변수로 전달받아서 서버에 요청해주는 함수
	  //1.xhr객체를 구해주는 구문
	  httpRequest=getXHR();
      alert(httpRequest);
      //2.서버요청할 준비->콜백함수를 지정(ex 자동응답기,문자서비스)
      //2.형식)xhr객체명.onreadystatechange=콜백함수명;// ()(X)->함수이름만 사용
      httpRequest.onreadystatechange=viewMessage;
      //3.xhr객체명.open(3개의 매개변수를 지정)
      //1)요청방식(get or post) 2.요청문서명(url) 3)처리방식(비동기방식(true) or 동기방식)
      //비동기방식->카톡,메일보내기(상대방이 결과를  보내주는것와 상관없이 다른일을 할 수 있는 방식 )
      httpRequest.open("GET",url,true);
      //4.xhr객체명.send(null or 매개변수명)//서버에게 특별히 매개변수를 전달할 필요가 있을때
      httpRequest.send(null);
  }
  //3)서버로부터 처리결과를 받아서 출력시켜주는 함수(=콜백함수)
  function viewMessage(){
	  //alert("viewMessage()호출됨");
	  //1)서버가 클라이언트의 요청을 다 받았는지 확인?->readyState=4(1,~3일 부분만 요청받은경우)
	  if(httpRequest.readyState==4){
		  //2)서버가 클라이언트에게 데이터를 다 전송했는지를 체크
		  if(httpRequest.status==200){
			  //텍스트(text)->responseText이용 xml->responseXml속성을 이용
			  alert(httpRequest.responseText);
		  }else{//404(페이지 X) 500(문법에러),403(접근금지)
			  alert('실패:'+httpRequest.status);
		  }
	  }
  }
</script>
</head>
<body>
  <h2>텍스트파일에 대한 한글처리방법</h2><!-- 1).이벤트발생 -->
  <input type="button" value="simple.txt" onclick="load('simple.txt')">
  <input type="button" value="simple2.txt" onclick="load('simple2.txt')">
  <input type="button" value="simple.jsp" onclick="load('simple.jsp')">
  <input type="button" value="simple2.jsp" onclick="load('simple2.jsp')">
</body>
</html>

*** Review ****

Ajax를 사용하기위해서는 html->xhtml을 주로 사용한다.
                                               ->xml문서의 성격+html문서의 성격을 가진 문서
                                                  임의로 태그를 만들어서 사용이 가능

                                            jsp->xhtml이 적용된 jsp를 보통 사용

===============================================
prototype.js<---jQuery->다양한 함수를 불러다 사용이 가능하기때문에 사용
-----------------------------------------------------------------
0.prototype.js를 JspMember 프로젝트에 복사

1.xhtml을 지원해주는 jsp 선언부분  =>Register.jsp save as Register2.jsp(백업)

 Register.jsp에 선언문 복사

<?xml version="1.0" encoding="UTF-8" ?>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
---------------------------------------------------------------------
함수를 이용  ->prototype.js에서의 $함수 이용

function $(element) {
  if (arguments.length > 1) {
    for (var i = 0, elements = [], length = arguments.length; i < length; i++)
      elements.push($(arguments[i]));
    return elements;
  }
  if (Object.isString(element))
 element = document.getElementById(element);
  return Element.extend(element);
}

****************************************
document.getElementById("id값")=>객체를 얻어온다.
*****************************************

  $("id값")을 사용하기위해서 prototype.js 라이브러리 가 필요하기때문에

Register.jsp

<title>회원가입</title>
<link href="style.css" rel="stylesheet" type="text/css">
<script language="JavaScript" src="script.js"></script>
<script language="JavaScript" src="prototype.js"></script> =>$()을 사용하기위해
<script language="JavaScript" src="searchWord.js"></script>=>Ajax요청 구문을
                                                                                                따로 작성하기위해

 <tr> 
            <td width="16%">아이디</td>
            <td width="57%">                         $("mem_id")
            <input type="text" name="mem_id"  id="mem_id" size="15">
                                                                    ========
		      <input type="button" value="ID중복확인" 
                                              onClick="idCheck(this.form.mem_id.value)">
           </td>
            <td id="ducheck" width="27%">아이디를 적어 주세요.</td>
                  ========$("ducheck")
          </tr>
------------------------------------------------
2.script.js에서 IdCheck()사용X=>주석처리

//중복ID체크 해주는 자바스크립트함수 선언
/*
function idCheck(id){  //var idCheck=function(){}
   if(id==""){
	   alert("아이디를 먼저 입력하세요")
	   document.regForm.mem_id.focus() //document.폼객체명.입력양식.함수명()
   }else{ //=>window.open(불러올 문서명(jsp),창제목,창의옵션(넓이,높이,,,)
	   //url="IdCheck.jsp"  IdCheck.jsp를 불러올 뿐 매개변수 전달 X
	   url="IdCheck.jsp?mem_id="+id
	   window.open(url,"post","left=450,top=150,width=300,height=150")
   }
}
*/

3.Register.jsp에서 선언부분과 중복id 체크 id부여

<script language="JavaScript" src="script.js"></script>
<script language="JavaScript" src="prototype.js"></script>
<script language="JavaScript" src="searchWord.js"></script>

  <input type="text" name="mem_id"  id="mem_id"  size="15">
                                                          =========
		      <input type="button" value="ID중복확인" 
       onClick="idCheck(this.form.mem_id.value)"></td>
            <td id="ducheck" width="27%">아이디를 적어 주세요.</td>
          </tr>===========

4.searchWord.js

/**
 * xhr객체를 생성->요청-->jsp로 요청->응답->콜백함수 출력
 */
var xhrObject //xhr객체를 전역변수로 선언

//1.xhr객체를 생성함수 선언
function createXHR(){
	 if(window.XMLHttpRequest){
		 xhrObject=new XMLHttpRequest()//객체를 생성->반환
		// alert(xhrObject) 
	 }
}

//2.중복id를 입력->처리하는 함수
function idCheck(id){
	if(id==""){
		//var mem_id=document.getElementById("ducheck")
		var mem_id=$("ducheck")
		//alert(mem_id)
		$("ducheck").innerHTML="<font color='red'>아이디를 먼저 입력요망</font>"
		//document.regForm.mem_id.focus()
		$("mem_id").focus()
		return false;
	}
	//입력했다면->Ajax를 이용해서 IdCheck.jsp을 요청
	//1.xhr객체 얻어옴
	createXHR()//->xhrObject
	var url="http://localhost:8090/JspMember/IdCheck.jsp?"+getParameterValues()
	//alert(url)
	//2.콜백함수 지정
	xhrObject.onreadystatechange=resultProcess
	//3.open함수를 서버에 요청준비
	xhrObject.open("Get",url,true);//비동기 방식
	//4.send()요청
	xhrObject.send(null);
}

//3.파라미터값을 처리해주는 함수
function getParameterValues(){
	var mem_id=$("mem_id").value
	//서버캐시에 요청 메모리에 저장하지 않는 방법
	//파라미터값을 하나 전달할때 오늘날짜를 같이 출력시켜주는 매개변수를 첨부
	return "mem_id="+mem_id+"&timestamp="+new Date().getTime()
}
//4.콜백함수
function resultProcess(){
	//alert("resultProcess")//콜백함수 호출이 되는지 확인
	if(xhrObject.readyState==4){//서버가 요청을 다받았다면
		if(xhrObject.status==200){//서버의 결과를 받았다면
		  var result=xhrObject.responseText;//태그+문자열=>문자열	
		  $("ducheck").innerHTML=result;
		}
	}
}
=====================================
5.IdCheck.jsp  save as IdCheck2.jsp

<?xml version="1.0" encoding="UTF-8" ?>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="hewon.*" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
==================================

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Id중복 체크</title>
<link href="style.css" rel="stylesheet" type="text/css">
<script language="JavaScript" src="script.js"></script>
</head>
<body bgcolor="#FFFFCC">
<br>
<%
  //searchWord.js=>IdCheck.jsp?mem_id='kkk'&timestamp=~;
  //xhr객체가 받을 xml형태로 받을 수 있도록 text/xml형태로 전환(태그+문자열)
  response.setContentType("text/xml;charset=utf-8");
  String outString="";//xhr객체에게 전달할 내용을 담을 변수 선언(태그+문자열)
  String mem_id=request.getParameter("mem_id");
  System.out.println("IdCheck.jsp의 mem_id=>"+mem_id);
   //DB접속->MemberDAO의 checkId(mem_id)
   MemberDAO memMgr=new MemberDAO();
   boolean check=memMgr.checkId(mem_id);
   System.out.println("check="+check);
   
   if(check==true){//이미 사용중인 아이디가 존재한다면
  outString="<font color='red'><b>이미 사용중인 아이디입니다.</b></font>";   
   }else{//사용이 가능한 경우
  outString="<font color='blue'><b>사용이 가능한 아이디입니다.</b></font>";	   
   }
   //xhr객체가 받을 수있도록 전송
   out.println(outString);
   System.out.println(outString);//콘솔에 출력
%>
</body>
</html>
---------------------------------
 **  실행결과  **

IdCheck.jsp의 mem_id=>admin
pool=>hewon.DBConnectionMgr@46e5620b
checkId메서드의 check=>true
IdCheck.jsp의 check=true
<font color='red'><b>이미 존재하는 아이디</b></font>
IdCheck.jsp의 mem_id=>imsitest
pool=>hewon.DBConnectionMgr@46e5620b
checkId메서드의 check=>false
IdCheck.jsp의 check=false
<font color='blue'><b>사용이 가능한 아이디</b></font>
=====================================
 ***서버의 메모리 캐시 제거하는 방법***** 

1.jsp파일 마다 상단부분에 작성

 <%
 response.setHeader("Cache-Control","no-cache");
 response.setHeader("Pragma","no-cache");
 response.setDateHeader("Expires",0);
%>


   css,javascript파일에 업데이트를  적용할수 있도록 버전관리를 한다.

2.<script language="JavaScript" src="script.js?ver=2.0"></script>
<script language="JavaScript" src="prototype.js"></script>
<script language="JavaScript" src="searchWord.js"></script>

3.요청시 뒤에 날짜를 찍어서 같이 매개변수로 보내준다.

//3.파라미터값을 처리해주는 함수=>서버의 메모리 캐시를 제거시키는 역할
function getParameterValues(){
	var mem_id=$("mem_id").value;//document.regForm.mem_id.value
	//서버캐시에 요청메모리에 저장하지 않은방법->항상 동일한 url경로 지정X
	return "mem_id="+mem_id+"&timestamp="+new Date().getTime();
}
======================================
 jQueryTest

 **jQuery의 특징 ** =>www.jquery.com =>자바스크립트 2 ~.js

라이브러리=> 개발에 자주 사용되는 함수들을 묶어 놓아서 필요로 할때 언제든지 꺼내 올수 
		있도록 만들어 놓은 모듈(ex prototype.js)

1.일단 무료, 오픈소스=>공개(다운로드) =>자바스크립트 라이브러리(개발할때 자주 사용이 되는 함수들의 집합체)

2.작은 용량 (min : 18KB, uncompressed : 114KB) ->압축버전,     압축버전(X)
                                                                    		          내용확인X     내용확인 O
3.수많은 사용자 커뮤니티 활성화

4.웹 브라우저간의 차이를 자체적으로 표준화 ->동일한 기능을 사용이 가능

5.플러그인의 다양성
**************
잘 정리된 API 문서 존재
**************
브라우저보다 앞선 W3C 명세 수용
사용자인터페이스 제공

==================================
 =>Write less, do more (적게 작성하고, 기능은 보다 많이 한다. )

  jQueryTest
       |
        -src/main/webapp
              |
               1.selector->01.ready.html

**01.ready.html **

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<script type="text/javascript" src="../jquery-3.4.1.min.js"></script>
<title>01.ready()함수</title>
<script>
/* (1)
  function test(){
	  alert("jQuery 소개");
  }
    (2) 불러오는 문서의 내용이 복잡(화면디자인 복잡)=>속도가 느려지는 단점
     window.on이벤트종류명=호출할 함수명 or 익명함수
     
     window.onload=function(){
    	 alert("jQuery 소개2");
    }
    (3) 속도가 빠른 jQuery ready() 함수를 이용
*/
  $(document).ready(function(){ //문서를 읽어들여서 맨 처음 실행할 구문이 있다면 실행
	  alert("ready()를 이용해서 함수를 호출합니다.");
  })
  
  $().ready(function(){
	  alert("함수를 호출2");
  })
  
********************************
  $(function(){
	  alert("함수를 호출3");
  })
 ********************************
</script>
</head>
<body>
<!-- <body onload="test()"> (1) -->

</body>
</html>
--------------------------------------------------------
02.cdn.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<script type="text/javascript" src="http://code.jquery.com/jquery-3.3.1.min.js"></script>
<title>02.cdn을 이용하는 방법</title>
<style type="text/css">
   /* 선택자(태그)  {속성명:속성값;~}  옛날 방식
   h1 {color:red}
   span {border:3px solid blue}
   .my{border:5px dotted green}
   */
</style>
<script>
   $(function(){//ready함수-> onload 이벤트 대신 사용
	  //형식 $(element(태그이름), id, class선택자,,,).함수명().함수명2(),,, chaining method
	  //형식 1) $('태그명').css('속성명','속성값')
	  $('h1').css('color','red')
   	  $('span').css('border','3px solid blue')
   	  //형식 2) 클래스선택자 ->$(태그명.클래스명)
   	  $('.my').css('border','8px double green')//my라는 클래스 선택자를 가진 태그를 찾아서 스타일 적용
   	  //스타일 적용이 동시에 더블로 적용->가장 마지막에 설정한 스타일이 적용된다.(우선순위)
   	  //형식 3) id선택자->$('태그명#id선택자이름')=>태그명은 생략가능
	  $("div#content").css('background','yellow')
   	  //형식 4) 모든 태그를 가리키는 예약어 ->*
   	  $('*').css('color','cyan')//동일한 스타일을 여러번 적용=>맨 마지막이 반영
   })
</script>
</head>
<body>
<h1>jQuery 선택자 연습</h1>
 <p class="my">jQuery 실습</p>
 <div>
 		<div id="content">id 값이 content인 div</div>
 </div>
 <span>span1</span>
 <span class="my">span2</span>	
</body>
</html>
----------------------------------------------------------------------------------------
!!새로운 html문서만들기

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<script type="text/javascript" src="http://code.jquery.com/jquery-3.4.1.min.js"></script>
<title>jQuery예제</title>
<script>   
   $$(function(){
 ==>템플레이트를 작성-> html template링크를 통해서 들어가서 new template html을 생성
원하는 패턴을 편집해서 자주 사용되는 문서를 복사=>apply & close
	  
   })
</script>
</head>
<body>

</body>
</html>
-----------------------------------------------------------------------------------------
03.template.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<script type="text/javascript" src="http://code.jquery.com/jquery-3.4.1.min.js"></script>
<title>jQuery 예제(함수를 연결)</title>
<script>   
   $(function(){
	  //var test=document.getElementsByTagName('h2')//태그정보 ->태그객체를 의미
	  var test=$('h2');
	  //alert(test);//[Object object] ->자바스크립트 객체 표시
	  /*
	  test.css('font-family','맑은고딕')
	  test.css('font-size','30pt')
	  test.css('color','red')
	  특정태그에 대해서 함수를 호출할 때 여러개의 함수를 마치 체인처럼 나열해서 호출하는 방식
	  ->chaining method방법(아래)
	  */
	  test.css('font-family','맑은고딕').css('font-size','40pt').css('color',' orange')	  
   })
</script>
</head>
<body>
<h2>jQuery CSS연습</h2>
<h3>jQuery CSS연습 2</h3>
</body>
</html>
-----------------------------------------------------------------------------------------




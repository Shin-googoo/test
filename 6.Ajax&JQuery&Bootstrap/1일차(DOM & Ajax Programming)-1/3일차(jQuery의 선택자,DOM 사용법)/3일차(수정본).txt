3일차(jQuery의 선택자,DOM 사용법)->부트스트립

   JQueryTest =>프로젝트명
  
*******************************************************
 1.selector(선택자)=> 2.DOM=> 3.event=> 4.animation=> ***5.Ajax
   01~11.html                01~11.html				   $.ajax(단독함수)
*******************************************************

  04.each.html

<title>jQuery예제(each함수를 이용)</title>
<style>
		.fromjQuery0 {color:red}
		.fromjQuery1 {color:pink}
		.fromjQuery2 {color:blue}
		.fromjQuery3 {color:yellow}
</style>
<script>
   var i=0;//첨자로 이용(각각의 클래스선택자를 구분하기위해 사용)
  $(function(){
	  //형식) $(선택자).attr('속성명','속성값')
	  //같은 태그를 어떻게 구분해서 스타일을 적용? ->반복적으로 스타일을 적용(반복문)->each
	  //형식)$('반복적으로 수행할 태그명').each(호출할 사용자정의함수명 | 익명함수명)
	 // $('li').attr('class','fromjQuery0')  //<->$('li').attr('class')  속성명의 값을 얻어올때 사용
	 $('li').each(forEach);
  })
  
  function forEach(){ //각각의 서로 다른 li태그에 스타일을 다르게 설정
	  //$('li').attr('class','fromjQuery'+i); 직접적으로 태그가 같은경우 사용할 수 없다.
	  $(this).attr('class','fromjQuery'+i);
      //$(this)=>현재 선택해서 읽어들이는 태그객체를 구분시켜주는 예약어(이벤트)
      // alert(i)
       i++;
  }
</script>
</head>
<body>
   <ul><!--  태그정보.setAttribute('속성명(키명)','값(저장할값)') -->
       <li>jQuery each()연습</li>
       <li>jQuery each()연습2</li>
       <li>jQuery each()연습3</li>
       <li>jQuery each()연습4</li>
   </ul> 
   <!-- <ul> (1) 정적디자인->디자인한  그 상태 그대로 보여주는것
       <li class="fromjQuery0">jQuery each()연습</li>
       <li class="fromjQuery1">jQuery each()연습2</li>
       <li class="fromjQuery2">jQuery each()연습3</li>
       <li class="fromjQuery3">jQuery each()연습4</li>
   </ul> -->
</body>
</html>

function test() {

}

var test2=function(){ => test2()

} => 익명함수-> 변수가 함수대신으로 부른다.

 05.each2.html

<title>jQuery예제(05.each함수 2번째예제)</title>
<script>
  $(function(){
	  //중첩된 태그의 정보를 어떻게 얻어오고 내용을 검색->스타일을 적용?
	  //jquery var $변수명=값(객체)
	  var nodes=$('#root').children().css('color','red')
	  alert('자식들의수=>'+$nodes.length)
	  var txt="";//자식들의 이름들을 저장할 변수
	  //형식)$(반복적으로 실행시킬 태그명).each(호출할 함수명 | 익명함수)
	  /*
	    1.text()->태그의 텍스트만 가져오는 함수 <->text(매개변수(변경할값))
	    2.html()->태그와 텍스트들까지 같이 가져오는 함수<->html(매개변수)->setter  함수
	    3.val()->입력폼 안에 입력양식에 해댱되는 값을 가져올때 사용(input ,check,radio~)
	                 <->val(매개변수값)
	  */
	  $('#root').children().each(function(){
		  txt+=$(this).text()+" ";
	  })
	  alert(txt)
  })
</script>
</head>
<body><!-- 부모 자식 관계(중첩관계) -->
   <div id="root">
       <div><b>홍길동</b></div>
       <div>테스트김</div>
       <div><i>임시</i></div>
       <div>임시테스트</div>
   </div>
</body>
</html>

 06.child.html (중첩)

<title>jQuery예제(부모-자식관계(중첩관계))</title>
<script>
************************************************************
 $(function(){
	//중첩=> 트리구조 형성(DOM)
	//형식) 부모태그 > 자식태그 -> 부모태그 바로 밑에 있는 자식태그를 선택할때 사용-> 자손태그 포함X
	//형식2) 부모태그  자식태그 -> 부모태그 바로 밑에 있는 자식태그를 선택할때 사용-> 자손태그 포함O
	//형식3) 부모태그+자식태그 -> 바로 옆의 태그를 찾을때 사용 
	//next()-> 바로 다음번 항목, <-> prev()=> 바로 전의 항목(태그)		
	//nextAll()-> 바로 다음번 항목 전체, <-> prevAll() -> 바로 이전의 항목전체
	$('body  div').css('border','3px solid navy');
	//$('span+a').next().next().css('border','3px double green'); next() 여러번 사용 가능 
	$('span+a').nextAll().css('border','3px double green');
	$('span+a').next().next().prevAll().css('background','yellow');
	$('span+a').siblings().css('background','cyan'); 
	//a태그를 기준으로 해서 왼쪽(형)과 오른쪽(동생) 모든 태그 
})
***************************************************************
</script>
</head>
<body>
    <div>
       <ul>과일 목록
            <li>사과</li>
            <li>배</li>
            <li>복숭아</li>
            <li>오렌지</li>
            <li>파인애플</li>
       </ul>
       <div>가을</div>
    </div>
    <div>jQuery 연습</div>
    <p>
       <span>태그정보</span>
       <a>one</a>
       <span>태그정보2</span>
       <span>태그정보3</span>
       <span>태그정보4</span>
    </p>
</body>
</html>

 07.attr.html(선택자->id선택자,클래스선택자,중첩에 대한 선택자,속성에 대한 선택자,,,)

==============================================

              선택자 속성 설명
	 요소[속성명]->특정 속성을 가진 태그를 찾을때 사용
	 요소[속성명=값]->속성값이 일치하는 태그를 찾아라
	 요소[속성명!=값]->속성값이 일치하지않는 태그를 찾아라
	 
	 요소[속성명^=값]->지정한값으로 시작하는 태그를 찾아라
	 요소[속성명|=값]->지정하는값을 찾거나 지정한글자- 태그를 찾아라
	 요소[속성명$=값]->지정한 값으로 끝나는 태그를 찾아라
	 요소[속성명*=값]->지정한 값을 포함한 태그를 찾아라(ex sql의 like연산자 비슷)
	 요소[속성명~=값]->지정한값을 단어로서 포함하는 태그를 찾아라

<script>
  $(function(){
	  /*
	 선택자  속성         설명
	 요소[속성명]->특정 속성을 가진 태그를 찾을때 사용
	 요소[속성명=값]->속성값이 일치하는 태그를 찾아라
	 요소[속성명!=값]->속성값이 일치하지않는 태그를 찾아라
	 
	 요소[속성명^=값]->지정한값으로 시작하는 태그를 찾아라
	 요소[속성명|=값]->지정하는값을 찾거나 지정한글자- 태그를 찾아라
	 요소[속성명$=값]->지정한 값으로 끝나는 태그를 찾아라
	 요소[속성명*=값]->지정한 값을 포함한 태그를 찾아라(ex sql의 like연산자 비슷) 관련된 값 다 찾는경우
	 요소[속성명~=값]->지정한값을 단어로서 포함하는 태그를 찾아라(단어중심으로 )
	  */
	  $('button[name]').html('변경됨');//button태그중에서 name속성인 버튼을 찾아서 버튼의 이름을 변경됨으로 변경하라<->html()
      //input태그중에서 type속성값이 text인 태그를 찾아서 hello jQuery글자를 저장시키시오.
      $('input[type=text]').val('hello jQuery');//<->$('input[type=text]').val()
      //input태그중에서 type속성이 text가 아닌 input태그 찾기
      //$('input[type!=text]').val('부정');
      //특정태그의 속성값이 content-로 시작하는 태그를 찾아서 배경색을 green을 적용시켜라.
      //$('div[id=content-1]')
      $('div[id^=content-]').css('background','green');
      //찾는값이 content 이거나  content- 인것을 찾는 구문
      $('div[id|=content]').css('background','blue');
      //div태그중에서 id속성값이 2로 끝나는 태그를 찾아서 글자크기를 20pt 설정하라
      $('div[id$=2]').css('font-size','20pt').css('background','yellow');
      //input 태그중에서 id속성값이 한국을 포함하는 단어찾기(공백은 인식X)
      $('input[id*=한국]').css('font-size','30pt').css('background','brown');
      //input 태그중에서 name속성값이 한국을 포함하는 태그를 찾아서 글자크기를 50pt로 설정하라
      $('input[name~=한국]').css('font-size','50pt')//공백을 인식가능->단어중심으로 값을  찾을때 사용
  })


 08.inputattr.html

              요소:button->input 태그중에서 type속성이 button인 경우
	       비활성화(disabled) true <-->활성화(enabled)->true
	요소:reset(초기화),요소:submit(전송)
	요소:text->type속성이 text인 경우
	요소:checkbox,->checked->false(체크하지 마라)->true(체크표시)
	요소:file(파일첨부)
	요소:image,요소:password,요소:radio

     //형식) $('선택자').attr(속성명,속성값)<->~attr(속성명)
	  $('input:checkbox').attr('checked',false);//체크해제
	  $('input:disabled').attr('disabled',false);//비활성화 제거->활성화시켜달라
	  $('input:text').val('값을 입력하세요') //val('') ->inputbox의 값을 지울때 사용
	  //input태그중에서 password인 속성을 찾아서 배경색을 pink, '값입력' 저장
	  $('input:password').css('background','pink').val('값입력');
	  //input태그중에서 type속성이 button을 찾아서 버튼의 value값을 ->회원가입으로 저장
	  $('input[type=button]').val('회원가입');
	  $('input:button').val('회원가입2');


 09.select.html

<script>
  $(function(){
	  //요소:selected=>select태그의 option객체중에서 선택된 태그를 가리킬때 사용
	  /*
	  1.setTimeout(호출할 함수명 | 익명함수,초단위(1000))->1초->한번만 실행
	  2.setInterval(호출할 함수명 | 익명함수,초단위(1000))->1초->계속 반복해서 실행
	  */
	  setInterval(function(){
		  var value=$('select > option:selected').val()
		  alert(value);
	  },5000);//5초뒤에 선택한 항목을 화면에 출력시켜라
  })
</script>
=================================================
10.filter.html

               요소:odd->홀수번째 위치한 태그를 찾기
	 요소:even ->짝수번째
	 요소:first->첫번째 위치의 태그
	 요소:last->마지막번째 위치의 태그

<script>
  $(function(){
	  //선택자(같은 태그->속성을 이용)->같은 태그인데 만약에 속성이 없으면 어떻게 구분해서 스타일적용?
	  //같은 태그의 출력되는 순서를 기준으로 설정
	  /*
	  요소:odd->홀수번째 위치한 태그를 찾기
	  요소:even ->짝수번째
	  요소:first->첫번째 위치의 태그
	  요소:last->마지막번째 위치의 태그
	  */
	  $('tr:even').css('background','pink');//내부적으로 인덱스는 0부터 시작
	  $('tr:first').css('font-size','23pt').css('background','yellow');
	  $('tr:last').css('font-size','30pt').css('background','cyan').css('color','red');
  })
--------------------------------------------------------------------------------------
11.filter2.html
 
	요소:contains(찾는문자열)->찾는 문자열을 가진 태그찾기
	요소:eq(n)->n번째 위치를 가진 태그찾기(인덱스번호가 같은거) ->ex) ~where ename='홍길동'
	요소:gt(n)->n번째보다 큰 위치를 가진 태그찾기 ex) >3
	요소:lt(n)->n번째보다 작은위치(인덱스번호) 위치를 가진 태그찾기 <2
	요소:not(선택자)->선택자와 일치하지 않은  태그찾기
	요소:has(특정 태그)->특정태그를 찾을때 사용

<script>
  $(function(){
	  //선택자(같은 태그->속성을 이용)->같은 태그인데 만약에 속성이 없으면 어떻게 구분해서 스타일적용?
	  //같은 태그의 출력되는 순서를 기준으로 설정,태그의 내용을 검색
	  /*
	    요소:contains(찾는문자열)->찾는 문자열을 가진 태그찾기
		요소:eq(n)->n번째 위치를 가진 태그찾기(인덱스번호가 같은거) ->ex) ~where ename='홍길동'
		요소:gt(n)->n번째보다 큰 위치를 가진 태그찾기 ex) >3
		요소:lt(n)->n번째보다 작은위치(인덱스번호) 위치를 가진 태그찾기 <2
		요소:not(선택자)->선택자와 일치하지 않은  태그찾기
		요소:has(특정 태그)->특정태그를 찾을때 사용
	  */
	  $('tr:even').css('background','pink');//내부적으로 인덱스는 0부터 시작
	  //$('tr:first').css('font-size','23pt').css('background','yellow');
	  //$('tr:eq(0)').css('font-size','23pt').css('background','green');
	  $('tr').eq(0).css('font-size','23pt').css('background','green');
	  $('td:contains(A형)').css('background','purple');
	  //$('tr:lt(2)').css('font-family','바탕체').css('font-size','16pt').css('color','red');
	  $('tr:gt(2)').css('font-family','바탕체').css('font-size','16pt').css('color','red');
	  $('tr').not(':even').css('color','cyan');//홀수번째 태그 찾아서 글자색을 cyan
	  $('tr:last').css('font-size','30pt').css('background','cyan').css('color','red');
	  //추가 (th태그를 찾아서 설정)
	  $('tr:has(th)').css('font-family','궁서체').css('font-size','50pt');
  })
프로젝트 =>개인별,팀별=>모델링 기초 이론=>각자 공부(이론,모델링을 설정하는 방법)
                 =>다음주 금요일(모델링 툴을 사용하는 방법=> exerd)

  jQuery ->DOM에 관련된 함수->appendTo,preprendTo,insertAfter,
                                                              insertBefore,append,prepend,after,before
                                   
-----------------------------------------------------------------------------

 예습=>정규화
          관계의 종류
        제3장 데이터 모델링
        제4장 데이터베이스 설계

  ** 쇼핑몰 데이터베이스 모델링.doc  **
  (기초~완성된 모델링)
================

 예습=>2개->만들어서
          3개 =>정리=>기초 정규화 1~4 설명
       =>테이블이 생성=>화면디자인을 할 수가 있다.

  jQuery=>화면디자인

  회원가입=>회원 중복 id체크

 https://cobook.tistory.com/8
 https://tyrannocoding.tistory.com/48







